<?php
/**
 * @file
 * Requirejs module file.
 */

/**
 * Implements hook_menu().
 */
function requirejs_menu() {
  $items = array();
  $items['admin/config/development/requirejs'] = array(
    'title' => 'Require.js',
    'description' => 'Settings for require.js interegration',
    'access arguments' => array('administer requirejs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('requirejs_admin_settings'),
    'file' => 'requirejs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_filesondemand().
 */
function requirejs_filesondemand() {
  return array(
    'requirejs' => array(
      'generate callback'      => '_requirejs_generate_layer',
      'validate path callback' => '_requirejs_validate_layer',

      // Never expire the cached items.
      'expires after' => FALSE,
    ),
  );
}

/**
 * Implements hook_perm().
 */
function requirejs_perm() {
  return array('administer requirejs');
}

/**
 * Set/Get the settings for Require.js.
 *
 * @param {Array} $settings
 *   New settings.
 *
 * @return {Array}
 *   The settings.
 */
function requirejs_settings($settings = NULL) {
  $cache = &drupal_static(__FUNCTION__);

  // This should be set via hook_require_paths().
  unset($settings['paths']);
  // TODO: these aren't supported for now because I don't understand them.
  unset($settings['packagePaths']);
  unset($settings['packages']);
  // TODO: will increase complexity significantly, punting for now.
  unset($settings['context']);
  // Chaos!
  unset($settings['deps']);

  if (!is_null($settings)) {
    $cache = array_merge($cache, $settings);
  }

  return $cache;
}

function requirejs_get_library_path() {
  $path = &drupal_static(__FUNCTION__);

  if (is_null($path)) {
    $path = libraries_get_path('requirejs');
    if (!file_exists("$path/require.js")) {
      $path = FALSE;
    }
  }

  return $path;
}

function _requirejs_check_bin($name) {
  $bins = array('/usr/bin', '/usr/local/bin');
  for ($i = 0, $len = count($bins); $i < $len; $i++) {
    $path = $bins[$i] . '/' . $name;
    if (file_exists($path)) {
      return $path;
    }
  }
}

function requirejs_get_optimizer_path() {
  $path = &drupal_static(__FUNCTION__);

  if (is_null($path)) {
    $path = variable_get('requirejs_optimizer_path', NULL);
    if (!$path) {
      // Attempt some sensible defaults.
      $node_path = _requirejs_check_bin('node');
      $node_path = is_null($node_path) ? _requirejs_check_bin('nodejs') : $node_path;
      if ($node_path && ($rjs_path = _requirejs_check_bin('r.js'))) {
        $path = "$node_path $rjs_path";
      }
      elseif ($node_path && ($library_path = requirejs_get_library_path()) && file_exists("$library_path/r.js")) {
        $path = "$node_path $library_path/r.js";
      }
      else {
        $path = FALSE;
      }
    }
  }

  return $path;
}

function requirejs_clear_optimizer_cache() {
  filesondemand_clear_cache('requirejs');
}

/**
 * Implements hook_flush_caches().
 */
function requirejs_flush_caches() {
  requirejs_clear_optimizer_cache();
  return array();
}

function _requirejs_generate_layer($path, $dest) {
  $profile = array(
    'name' => _requirejs_path_to_name($path),
    'paths' => requirejs_get_paths(),
    'baseUrl' => realpath('.'),
    'out' => realpath('.') . '/' . $dest,
  );

  if ($optimizer_path = requirejs_get_optimizer_path()) {
    $profile_path = tempnam(file_directory_temp(), 'rjs');
    $fd = fopen($profile_path, "w");
    fwrite($fd, drupal_to_js($profile));
    fclose($fd);

    exec("$optimizer_path -o " . $profile_path, $output, $retval);
    unlink($profile_path);

    if ($retval != 0) {
      watchdog('requirejs', 'Unable to run r.js optimizer (%optimizer) for %module',
        array('%optimizer' => $optimizer_path, '%module' => $profile['name']), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  return TRUE;
}

function _requirejs_path_to_name($path) {
  if (substr($path, strpos($path, '.')) == '.js') {
    return substr($path, 0, strpos($path, '.'));
  }
}

function _requirejs_validate_layer($path, $dest) {
  if ($name = _requirejs_path_to_name($path)) {
    $layers = requirejs_get_layers();
    return isset($layers[$name]);
  }

  return FALSE;
}

function requirejs_get_layers($rebuild = FALSE) {
  $layers = &drupal_static(__FUNCTION__);

  if ($rebuild) {
    $layers = NULL;
  }

  if (is_null($layers)) {
    if (!$rebuild) {
      $cache = cache_get('requirejs:layers');
      if ($cache) {
        $layers = $cache->data;
      }
    }
    if (is_null($layers)) {
      $layers = (array) module_invoke_all('requirejs_layers');
      drupal_alter('requirejs_layers', $layers);
      cache_set('requirejs:layers', $layers);
    }
  }

  return (array) $layers;
}

function requirejs_get_paths($rebuild = FALSE) {
  $paths = &drupal_static(__FUNCTION__);

  if ($rebuild) {
    $paths = NULL;
  }

  if (is_null($paths)) {
    if (!$rebuild) {
      $cache = cache_get('requirejs:paths');
      if ($cache) {
        $paths = $cache->data;
      }
    }
    if (is_null($paths)) {
      $path = requirejs_get_library_path();

      if ($path) {
        // Default paths for built-in plugins.
        $paths = array(
          'text'     => "$path/text",
          'domReady' => "$path/domReady",
          'order'    => "$path/order",
          'cs'       => "$path/cs",
          'i18n'     => "$path/i18n",
        );

        // Override with stuff from other modules.
        $paths = array_merge($paths, (array) module_invoke_all('requirejs_paths'));
        drupal_alter('requirejs_paths', $paths);

        cache_set('requirejs:paths', $paths);
      }
    }
  }

  return (array) $paths;
}

function requirejs_add_core() {
  $added = &drupal_static(__FUNCTION__);

  if (!$added && ($path = requirejs_get_library_path())) {
    drupal_add_js("$path/require.js");
    $added = TRUE;
  }
  else {
    drupal_set_message('This page uses require.js but it hasn\'t been downloaded and installed in the library path', 'error');
  }
}

function requirejs_add($module) {
  $modules = &drupal_static(__FUNCTION__);

  if (is_null($module)) {
    return $modules;
  }

  requirejs_add_core();

  // Attempt to make plain .js files work!
  if (substr($module, -3) == '.js') {
    if (substr($module, 0, 1) != '/') {
      $module = base_path() . $module;
    }
    if (!file_exists($module)) {
      watchdog('requirejs', 'Unable to find JavaScript file (did you mean to put .js on the end?): %module', array('%module' => $module), WATCHDOG_WARNING);
    }
  }

  $modules[] = (string) $module;
}

function requirejs_preprocess_page(&$variables) {
  $path = requirejs_get_library_path();

  if (!$path) {
    return;
  }

  $modules = requirejs_add(NULL);

  if (empty($modules)) {
    return;
  }

  $paths = requirejs_get_paths();

  // Add the paths from the optimizer.
  if (variable_get('requirejs_optimizer_enabled', FALSE) && requirejs_get_optimizer_path()) {
    foreach (requirejs_get_layers() as $name => $profile) {
      $paths[$name] = filesondemand_create_path('requirejs', $name);
    }
  }

  // Build the requirejs settings!
  $settings = requirejs_settings();
  $settings['baseUrl'] = base_path();
  $settings['paths'] = $paths;
  $settings['deps'] = $modules;

  // Create the HTML/JS to put into the page.
  $js = "<script>\n<!--//--><![CDATA[//><!--\n";
  $js .= "require = " . drupal_to_js($settings) . ";\n";
  $js .= "//--><!]]>\n</script>\n";

  $variables['scripts'] = $js . $variables['scripts'];
}
