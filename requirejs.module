<?php

/**
 * Implementation of hook_menu().
 */
function requirejs_menu() {
  $items = array();
  $items['admin/settings/requirejs'] = array(
    'title' => 'Require.js settings',
    'description' => 'Settings for require.js interegration',
    'access arguments' => array('administer requirejs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('requirejs_admin_settings'),
    'file' => 'requirejs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function requirejs_perm() {
  return array('administer requirejs');
}

function requirejs_settings($settings = NULL) {
  static $cache = array();

  // this should be set via hook_require_paths()
  unset($settings['paths']);
  // TODO: these aren't supported for now because I don't understand them
  unset($settings['packagePaths']);
  unset($settings['packages']);
  // TODO: will increase complexity significantly, punting for now
  unset($settings['context']);
  // Choas!
  unset($settings['deps']);

  if (!is_null($settings)) {
    $cache = array_merge($cache, $settings);
  }

  return $cache;
}

function requirejs_get_library_path() {
  static $path = NULL;

  if (is_null($path)) {
    $path = libraries_get_path('requirejs');
    if (!file_exists("$path/require.js")) {
      $path = FALSE;
    }
  }

  return $path;
}

function _requirejs_check_bin($name) {
  foreach(array('/usr/bin', '/usr/local/bin') as $base) {
    $path = $base . '/' . $name;
    if (file_exists($path)) {
      return $path;
    }
  }
}

function requirejs_get_optimizer_path() {
  static $path = NULL;

  if (is_null($path)) {
    $path = variable_get('requirejs_optimizer_path', NULL);
    if (!$path) {
      // attempt some sensible defaults
      $node_path = _requirejs_check_bin('node');
      $node_path = is_null($node_path) ? _requirejs_check_bin('nodejs') : $node_path;
      if ($node_path && ($rjs_path = _requirejs_check_bin('r.js'))) {
        $path = "$node_path $rjs_path";
      }
      else {
        $path = FALSE;
      }
    }
  }

  return $path;
}

function _requirejs_create_layer($profile) {
  $name = str_replace('/', '-', $profile['name']);
  $path = file_create_path() . '/requirejs/' . $name;
  $dest = realpath('.') . '/' . $path . '.js';

  if (!file_exists($dest)) {
    $profile['out'] = $dest;

    if ($optimizer_path = requirejs_get_optimizer_path()) {
      $profile_path = tempnam(file_directory_temp(), 'rjs');
      $fd = fopen($profile_path, "w");
      fwrite($fd, drupal_to_js($profile));
      fclose($fd);

      system("$optimizer_path -o " . $profile_path, $retval);
      unlink($profile_path);

      if ($retval != 0) {
        watchdog('requirejs', 'Unable to run r.js optimizer (%optimizer) for %module',
          array('%optimizer' => $optimizer_path, '%module' => $profile['name']), WATCHDOG_ERROR);
        return FALSE; 
      }
    }
  }

  return $path;
}

function requirejs_get_paths($include_layers = FALSE) {
  static $paths = NULL;
  static $layers = NULL;

  if (is_null($paths)) {
    $path = requirejs_get_library_path();

    // default paths for built-in plugins
    $paths = array(
      'text'     => "$path/text",
      'domReady' => "$path/domReady",
      'order'    => "$path/order",
      'cs'       => "$path/cs",
      'i18n'     => "$path/i18n",
    );
    // override with stuff from other modules
    $paths = array_merge($paths, (array)module_invoke_all('requirejs_paths'));
  }

  if ($include_layers && variable_get('requirejs_optimizer_enabled', FALSE)) {
    if (is_null($layers)) {
      $layers = array();
      foreach ((array)module_invoke_all('requirejs_layers') as $name => $profile) {
        $profile = (array)$profile;
        $profile['name'] = $name;
        $profile['paths'] = $paths;
        $profile['baseUrl'] = realpath('.');

        if ($layer_path = _requirejs_create_layer($profile)) {
          $layers[$name] = $layer_path;
        }
      }
    }

    return array_merge($paths, $layers);
  }

  return $paths;
}

function requirejs_add_core() {
  static $added = FALSE;

  if (($path = requirejs_get_library_path()) && !$added) {
    drupal_add_js("$path/require.js");
    $added = TRUE;
  }
  else {
    drupal_set_message('This page uses require.js but it hasn\'t been downloaded and installed in the library path', 'error');
  }
}

function requirejs_add($module) {
  static $modules = array();

  if (is_null($module)) {
    return $modules;
  }

  requirejs_add_core();

  // Attempt to make plain .js files work!
  if (substr($module, -3) == '.js') {
    if (substr($module, 0, 1) != '/') {
      $module = base_path() . $module;
    }
    if (!file_exists($module)) {
      watchdog('requirejs', 'Unable to find JavaScript file (did you mean to put .js on the end?): %module', array('%module' => $module), WATCHDOG_WARNING);
    }
  }

  $modules[] = (string)$module;
}

function requirejs_preprocess_page(&$variables) {
  $path = requirejs_get_library_path();
  if (!$path) return;

  $modules = requirejs_add(NULL);
  if (empty($modules)) return;

  // build the requirejs settings!
  $settings = requirejs_settings();
  $settings['baseUrl'] = base_path();
  $settings['paths'] = requirejs_get_paths(TRUE);
  $settings['deps'] = $modules;

  // create the HTML/JS to put into the page
  $js =  "<script>\n<!--//--><![CDATA[//><!--\n";
  $js .= "require = " . drupal_to_js($settings) . ";\n";
  $js .= "//--><!]]>\n</script>\n";

  $variables['scripts'] = $js . $variables['scripts'];
}

